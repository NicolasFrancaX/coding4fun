No 3º Placar nos foi apresentado o problema A.

Esse problema foi resolvido usando C++.

Nesse problema temos 2 inputs iniciais, um n e um m.

O n é o número de elementos do primeiro array.

O m é o número de elementos do segundo array.

O problema basicamente pede que, pra cada valor do 2º array, verifiquemos o número l, que é quantos elementos no 1º array são menores ou iguais a ele. Depois retornamos o valor l pra cada elemento do segundo array.

Ou seja:

Se o input for:

5 4
1 3 5 7 9
6 4 2 8

Então: para o valor: 	6, verificamos que 1, 3 e 5 são menores do que 6, logo, l = 3;
			4, verificamos que 1 e 3 são menores do que 4, logo, l = 2;
			2, verificamos que 1 é o valor menor do que 2, logo l = 1;
			8, verificamos que 1, 3, 5 e 7 são menores do que 8, logo l = 4;

Para resolver esse problema, a idéia (que eu pedi ajuda) foi:

- No 1º array, fazer um ordenação dele, tendo [1, 3, 5, 7, 9] (nesse caso) - Para essa ordenação, foi usado a função sort() da <algorithm>
- Depois de ordenado, foi usado a função upper_bound(), para retornar o ponteiro para o primeiro elemento maior do que o valor jogado no final da função (que era cada elemento do 2º vetor). Dessa forma, pra cada elemento do 2º vetor, eu tinha um ponteiro na posição do indice do meu interesse. 
- Com a função distance(), dando o ponteiro para o primeiro elemento do primeiro vetor e o ponteiro que o upper_bound() me retornou, eu tive o indice do meu interesse. Assim, pra cada valor do 2º vetor, eu adicionava esse indice.

Depois printei os valores dos indices do meu interesse, pois eles indiretamente representavam o número de elementos menores que cada valor do 2º elemento.

E dessa forma resolvi o problema.

Link do código: https://github.com/NicolasFrancaX/coding4fun/tree/master/maratona-unicamp/placar3/a

OBS.: Nesse link tem os arquivos auxiliares para tests e etc.
		
